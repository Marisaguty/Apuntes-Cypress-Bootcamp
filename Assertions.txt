type() -> escribir


游릮SHOULD
游댲Buscame el elemento de get y deber칤a existir
游댲Verifica que un elemento existe en el DOM

郊쀮잺SHOULD EXIST
cy.get('.title').should('exist')

郊쀮잺SHOULD HAVE
TEXT
 cy.get('.login_logo').should('have.text', 'Swag Labs')
 VALUE
  cy.get('#user-name').type('HOLA').should('have.value', 'HOLA')

郊쀮잺SHOULD CONTAIN
TEXT
Para verificar si la cadena de caracteres que estamos pasando esta incluida
  cy.get('.login_logo').should('contain.text', 'Labs')
VALUE
cy.get('#user-name').type('prueba')
cy.get('#user-name').should('contain.value', 'eba')

郊쀮잺SHOULD BE VISIBLE
Cuando queremos validar q el elemento esta en el DOM y adem치s no est치 oculto
cy.get('.bm-burger-button').should('be.visible')

郊쀮잺SHOULD BE CHECKED
Para verificar que un checkbox o radio button est치 verificado
cy.get('input[type="checkbox"]').eq(1).should('be.checked')

Aqu칤 he usado otra web -> https://the-internet.herokuapp.com/checkboxes

郊쀮잺SHOULD NOT
Verificar lo opuesto de todo lo anterior, queremos verificar que un inner text no contenga esos caracteres, que no este visible, que no este checked....

cy.get('input[type="checkbox"]').eq(0).should('not.be.checked')



游릮AS
游댲Puedo poner alias

cy.get('#user-name').as('nombreUsuario')
cy.get('@nombreUsuario').type('Hola')       <-



游릮CONTAINS
游댲Para encontrar el div que contiene el texto 'Swag Labs', y me imprime su clase

cy.contains('div', 'Swag Labs').then(title=>{
    cy.log(title.attr('class'))
})


游릮FIND
游댲Buscame el elemento de find dentro de get y dime si existe
cy.get('.login_wrapper-inner').find('#user-name').should('exist')


游릮FIRST
游댲Me coje el primer elemento de la clase '.form_input' y me escribe
cy.get('.form_input').first().type('HOLISSSSS')

游릮LAST
游댲Me coje el ultimo elemento de la clase '.form_input' y me escribe
 cy.get('.form_input').last().type('HOLISSSSS')

 游릮EQ
游댲Le decimos el elemento por el indice. empieza en 0. este seria el elemento 2
cy.get('.form_input').eq(1).type('indicessss')

 游릮CLOSEST
游댲Nos permite localizar un elemento q coincida con el selector o con sus ancestros
si hay mas de uno con el mismo nombre, busca el m치s cercano

cy.get('#user-name').closest('#login_button_container').then(parent=>{
    cy.log(parent.attr('class'))
})
Y entonces nos imprime la clase

 游릮SHOULD EXIST
游댲Verifica que un elemento existe en el DOM

 游릮CLOSEST
游댲Me trae el elemento m치s cercano
*En el proyecto final -> cart.elements.js